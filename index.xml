<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>smilerfu&#39;s blogs</title>
    <link>http://smilerfu.github.io/</link>
    <description>Recent content on smilerfu&#39;s blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Sun, 13 May 2018 14:59:45 +0800</lastBuildDate>
    
        <atom:link href="http://smilerfu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cocos2d-x Lua &#43; CocosForWin3.10 &#43; BabelLua项目设置</title>
      <link>http://smilerfu.github.io/post/cocos2d-x-lua-&#43;-cocosforwin3/</link>
      <pubDate>Sun, 13 May 2018 14:59:45 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/cocos2d-x-lua-&#43;-cocosforwin3/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;项目环境&#34;&gt;项目环境&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;cocos2d-x-3.16&lt;/li&gt;
&lt;li&gt;VS2013&lt;/li&gt;
&lt;li&gt;CocosForWin-v3.10.exe&lt;/li&gt;
&lt;li&gt;BabeLua+For+2013+V3.2.2.0.vsix&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;创建项目&#34;&gt;创建项目&lt;/h4&gt;

&lt;h6 id=&#34;新建cocos2d-x-lua项目&#34;&gt;新建Cocos2d-x lua项目&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;切换到&lt;code&gt;cocos2d-x-3.16\tools\cocos2d-console\bin&lt;/code&gt;目录，执行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cocos new MyLuaGame -l lua -p com.xxx.xxx -d F:\cocosproject
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;编译项目&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;新建-cocostudio项目&#34;&gt;新建 Cocostudio项目&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;打开Cocostudio，选择【文件】，选择【新建项目】
&lt;img src=&#34;http://smilerfu.github.io/images/cocos2dx/cocostudio_new_project.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;F:\cocosproject\MyLuaGame\CocosProject\cocosstudio&lt;/code&gt;拷贝到项目根目录，即&lt;code&gt;F:\cocosproject\MyLuaGame&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;CocosProject.ccs&lt;/code&gt;、&lt;code&gt;CocosProject.cfg&lt;/code&gt;和&lt;code&gt;CocosProject.udf&lt;/code&gt;也拷贝到项目根目录，即&lt;code&gt;F:\cocosproject\MyLuaGame&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拷贝完毕后，CocosProject这个目录就没有什么用，可以删掉了&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;CocosProject.cfg&lt;/code&gt;文件中的&lt;code&gt;CreateFrameworkVersion Value=&amp;quot;cocos2d-x-3.16&amp;quot;&lt;/code&gt;和&lt;code&gt;CurrentFrameworkVersion Value=&amp;quot;cocos2d-x-3.16&lt;/code&gt;，目前不清楚此修改是否有作用&lt;/li&gt;
&lt;li&gt;使用Cocostudio打开项目，选择&lt;code&gt;F:\cocosproject\MyLuaGame\CocosProject.ccs&lt;/code&gt;打开即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;新加-lua项目&#34;&gt;新加 lua项目&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;右键解决方案，添加并新建Lua项目
&lt;img src=&#34;http://smilerfu.github.io/images/cocos2dx/solution_add_lua_project.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Lua项目路径设置为项目MyLuaGame的根路径
&lt;img src=&#34;http://smilerfu.github.io/images/cocos2dx/lua_project_new.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;右键Lua项目，选择添加现有目录，将F:\cocosproject\MyLuaGame\src目录添加入
&lt;img src=&#34;http://smilerfu.github.io/images/cocos2dx/lua_project_add_existing_folder.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;设置LuaProject为启动项目&lt;/li&gt;
&lt;li&gt;此时添加断点发现并不能中断，修改AppDelegate.cpp文件，添加&lt;code&gt;LuaStack* stack = engine-&amp;gt;getLuaStack();stack-&amp;gt;addSearchPath(&amp;quot;src/&amp;quot;);&lt;/code&gt;
&lt;img src=&#34;http://smilerfu.github.io/images/cocos2dx/lua_project_debug_appdelegate.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;设置MyLuaGame为启动项目，重新编译运行后，再设置LuaProject为启动项目，此时可以进入断点&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>网络 学习笔记</title>
      <link>http://smilerfu.github.io/post/%E7%BD%91%E7%BB%9C_%E5%AD%A6%E4%B9%A0_%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 17 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/%E7%BD%91%E7%BB%9C_%E5%AD%A6%E4%B9%A0_%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;ping使用icmp协议&#34;&gt;ping使用ICMP协议&lt;/h5&gt;

&lt;p&gt;Internet Control Message Protocol”（Internet控制消息协议）的缩写，是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43; 学习笔记</title>
      <link>http://smilerfu.github.io/post/c&#43;&#43;_%E5%AD%A6%E4%B9%A0_%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 16 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/c&#43;&#43;_%E5%AD%A6%E4%B9%A0_%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;前置-后置-递增-递减-运算符&#34;&gt;前置(后置)递增(递减)运算符&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;前置递增:&lt;code&gt;++i&lt;/code&gt; 等价于 &lt;code&gt;i=i+1, i&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;后置递增:&lt;code&gt;i++&lt;/code&gt; 等价于 &lt;code&gt;temp=i, i=i+1, temp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;temp是编译器产生的一个临时变量，只能作为右值使用。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;左值和右值&#34;&gt;左值和右值&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;++i&lt;/code&gt;是左值(可以形象地记为++在i左边)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i++&lt;/code&gt;是右值(可以形象地记为++在i右边)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;左值是可以写在等号左边的表达式，必须是一个非const的变量。&lt;br /&gt;
右值是可以写在等号右边的表达式，可以是一个常量,一个字面数字，或者说一个任意的可以求值的表达式。&lt;br /&gt;
一个可以作为左值的表达式,同时也是可以作为右值使用的。&lt;br /&gt;
如果对右值进行了左值的操作，那么是错误的。&lt;/p&gt;

&lt;p&gt;例如:&lt;/p&gt;

&lt;h6 id=&#34;效率&#34;&gt;效率&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;++i&lt;/code&gt;效率更高效一些，因为&lt;code&gt;i++&lt;/code&gt;产生了一个临时的变量temp&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;测试代码&#34;&gt;测试代码&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
using namespace std;  
  
int main()  
{  
    int i=0;  
    ++++i; // All Right  
    //i++++; // error C2105: &#39;++&#39; needs l-value  
    //++i=10; // All Right  
    //i++=10; // error C2106: &#39;=&#39; : left operand must be l-value  
    //++i++; // error C2105: &#39;++&#39; needs l-value  
    return 0;  
}  
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Lua class</title>
      <link>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_class/</link>
      <pubDate>Sun, 15 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_class/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Lua metatables</title>
      <link>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_metatables/</link>
      <pubDate>Sun, 15 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_metatables/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Lua string</title>
      <link>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_string/</link>
      <pubDate>Sun, 15 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_string/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;参考文档&#34;&gt;参考文档&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lua.org/manual/5.3/manual.html#pdf-string Manipulation&#34;&gt;http://www.lua.org/manual/5.3/manual.html#pdf-string Manipulation&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;string-byte-s-i-j&#34;&gt;string.byte (s [, i [, j]])&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;-- 功能: 返回字符 s[i], s[i+1], ..., s[j]的数字码。
-- 参数: 默认值: i=1, j=i.
-- 返回值: 返回数字码串
print(string.byte(&amp;quot;acb&amp;quot;, 1,3))  --&amp;gt; 97  99  98
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;string-char&#34;&gt;string.char (···)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;-- 功能: 将number的数字码转为字符
-- 参数: number
-- 返回值: 返回字符串

print(string.char(97, 99, 98))  --&amp;gt; acb
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;string-dump-function-strip&#34;&gt;string.dump (function [, strip])&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;-- 功能: 将一个函数序列化，返回序列化后的二进制字符串。之后可以使用load加载这个字符串。
-- 参数: strip如果为true，序列化后的字符串将不会包含任何debug信息，可以节省空间。
-- 返回值: 返回序列化后的二进制字符串

-- 普通函数
function dumpTest(v)
    print(&amp;quot;dumpTest: &amp;quot; .. v)
end

dumpString = string.dump(dumpTest)
loadFunc = load(dumpString)
loadFunc(&amp;quot;abcd&amp;quot;)  -&amp;gt; dumpTest: abcd

-- 闭包函数
function dumpTestClosure()
    i = 0
    local  function innerFunc()
    i = i + 1
    print(&amp;quot;inner: &amp;quot; .. i)
    end
    return innerFunc
end

closureFunc = dumpTestClosure()
closureFunc()  --&amp;gt; inner: 1
closureFunc()  --&amp;gt; inner: 2
dumpString = string.dump(closureFunc,true)
loadFunc = load(dumpString)
loadFunc()  --&amp;gt; inner: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;string-find-s-pattern-init-plain&#34;&gt;string.find (s, pattern [, init [, plain]])&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;-- 功能: 查找字符串s中第一个符合pattern的位置
-- 参数: init 搜索的起始位置，默认 init=1(可以为负数，表示从后往前数的字符个数)
--       plain 默认 plain=false，如果为true表示关闭模式匹配，只做简单的查找子串的操作。
-- 返回值: 找到返回起始位置和终止位置，没找到返回nil
print(string.find(&amp;quot;abcdabcdabcd&amp;quot;, &amp;quot;cda&amp;quot;))  --&amp;gt; 3    5
print(string.find(&amp;quot;abcdabcdabcd&amp;quot;, &amp;quot;d&amp;quot;))  --&amp;gt; 4  4
print(string.find(&amp;quot;abcdabcdabcd&amp;quot;, &amp;quot;123&amp;quot;))  --&amp;gt; nil

print(string.find(&amp;quot;abcdabcdabcd&amp;quot;, &amp;quot;cda&amp;quot;, 4))  --&amp;gt; 7 9
print(string.find(&amp;quot;abcdabcdabcd&amp;quot;, &amp;quot;cda&amp;quot;, -9))  --&amp;gt; 7    9
print(string.find(&amp;quot;abcdabcdabcd&amp;quot;, &amp;quot;cda&amp;quot;, -11))  --&amp;gt; 3   5
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;gsub&#34;&gt;gsub&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;print(string.gsub(&amp;quot;one string&amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;another&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Lua 学习笔记</title>
      <link>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 15 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/lua_%E5%AD%A6%E4%B9%A0_%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;8个基本类型&#34;&gt;8个基本类型&lt;/h5&gt;

&lt;p&gt;lua有8个基本类型，分别为: nil、boolean、number、string、userdata、function、thread、table
可使用type函数获取变量的类型，返回一个字符串:
&lt;code&gt;print(type(123))  --&amp;gt;  number&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;booleans&#34;&gt;Booleans&lt;/h5&gt;

&lt;p&gt;lua除了false和nil为假，其余都为真，0和空字符串也为真。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>IDEA 快捷键</title>
      <link>http://smilerfu.github.io/post/idea_%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Thu, 12 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/idea_%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;常用快捷键&#34;&gt;常用快捷键&lt;/h3&gt;

&lt;h5 id=&#34;main函数&#34;&gt;main函数&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;psvm&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;system-out-println&#34;&gt;System.out.println();&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sout&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;for循环&#34;&gt;for循环&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;fori&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;自定义模板编辑&#34;&gt;自定义模板编辑&lt;/h3&gt;</description>
      
    </item>
    
    <item>
      <title>DokuWiki环境搭建</title>
      <link>http://smilerfu.github.io/post/dokuwiki_%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 05 Apr 2018 09:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/dokuwiki_%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;centos-6-6-x64环境下搭建&#34;&gt;CentOS 6.6 x64环境下搭建&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载dokuwiki压缩包: &lt;a href=&#34;https://download.dokuwiki.org/&#34;&gt;dokuwiki-c5525093cf2c4f47e2e5d2439fe13964.tgz&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;切换到目录:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd /var/www/html&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解压 dokuwiki-c5525093cf2c4f47e2e5d2439fe13964.tgz&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar -zxvf dokuwiki-c5525093cf2c4f47e2e5d2439fe13964.tgz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;解压完毕后，&lt;code&gt;在/var/www/html&lt;/code&gt; 下会出现 &lt;code&gt;dokuwiki&lt;/code&gt; 目录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更改Apache根路径&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chown -R apache:root /var/www/html/dokuwiki&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更改目录访问权限&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod -R 664 /var/www/html/dowuwiki
find /var/www/html/dokuwiki/ -type d -exec chmod 775 {} \;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装php，不然打开.php网页时，只会显示php代码，而不是网页页面&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install php&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;启动apache&lt;/p&gt;

&lt;p&gt;&lt;code&gt;service httpd start&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;访问&lt;a href=&#34;http://127.0.0.1/dokuwiki/doku.php&#34;&gt;http://127.0.0.1/dokuwiki/doku.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/dokuwiki/dokuwiki_install_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;局域网通过IP进行访问需先关闭防火墙&lt;/p&gt;

&lt;p&gt;&lt;code&gt;service iptables stop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此时可通过&lt;a href=&#34;http://192.168.x.x/dokuwiki/doku.php进行访问&#34;&gt;http://192.168.x.x/dokuwiki/doku.php进行访问&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;访问&lt;a href=&#34;http://127.0.0.1/dokuwiki/install.php&#34;&gt;http://127.0.0.1/dokuwiki/install.php&lt;/a&gt;可进行权限号账号、密码等设置
&lt;img src=&#34;http://smilerfu.github.io/images/dokuwiki/dokuwiki_install_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;install.php配置完毕后的界面如下:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/dokuwiki/dokuwiki_install_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果没有出现上界面，而是和第(9)步骤未配置前一样，说明有信息未填写。配置没有生效。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:设置完之后一般将此install.php文件删除，避免遭他人修改&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;【附录】&lt;/p&gt;

&lt;p&gt;官网: &lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;https://www.dokuwiki.org/dokuwiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载地址: &lt;a href=&#34;https://download.dokuwiki.org/&#34;&gt;https://download.dokuwiki.org/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;官网插件下载地址&#34;&gt;官网插件下载地址&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;下载地址:&lt;a href=&#34;https://www.dokuwiki.org/plugins&#34;&gt;https://www.dokuwiki.org/plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;1-wrap-plugin-插件&#34;&gt;1.Wrap Plugin 插件&lt;/h5&gt;

&lt;p&gt;1.下载地址: &lt;a href=&#34;https://www.dokuwiki.org/plugin:wrap&#34;&gt;https://www.dokuwiki.org/plugin:wrap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.下载后得到 &lt;code&gt;dokuwiki_plugin_wrap-stable.zip&lt;/code&gt; 文件&lt;/p&gt;

&lt;p&gt;3.将其解压到 &lt;code&gt;/var/www/html/dokuwiki/lib/plugins&lt;/code&gt; 底下&lt;/p&gt;

&lt;p&gt;4.将文件夹名 &lt;code&gt;dokuwiki_plugin_wrap-stable&lt;/code&gt; 重命名为 &lt;code&gt;warp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5.有需要的话重启下网络服务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>DokuWiki插件安装</title>
      <link>http://smilerfu.github.io/post/dokuwiki_%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 05 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/dokuwiki_%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;官网插件下载地址&#34;&gt;官网插件下载地址&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;下载地址:&lt;a href=&#34;https://www.dokuwiki.org/plugins&#34;&gt;https://www.dokuwiki.org/plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;wrap-plugin-插件&#34;&gt;Wrap Plugin 插件&lt;/h5&gt;

&lt;p&gt;1.下载地址: &lt;a href=&#34;https://www.dokuwiki.org/plugin:wrap&#34;&gt;https://www.dokuwiki.org/plugin:wrap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.下载后得到 &lt;code&gt;dokuwiki_plugin_wrap-stable.zip&lt;/code&gt; 文件&lt;/p&gt;

&lt;p&gt;3.将其解压到 &lt;code&gt;/var/www/html/dokuwiki/lib/plugins&lt;/code&gt; 底下&lt;/p&gt;

&lt;p&gt;4.将文件夹名 &lt;code&gt;dokuwiki_plugin_wrap-stable&lt;/code&gt; 重命名为 &lt;code&gt;warp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5.有需要的话重启下网络服务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>GitHub的SSH配置</title>
      <link>http://smilerfu.github.io/post/github_ssh%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 05 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/github_ssh%E9%85%8D%E7%BD%AE/</guid>
      
        <description>&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;克隆仓库&#34;&gt;克隆仓库&lt;/h3&gt;

&lt;p&gt;我们在github上克隆仓库的时候，一般使用ssh或者https这2种方式。
&lt;img src=&#34;http://smilerfu.github.io/images/git/git_clone_ssh_https.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;https在git push的时候每次都要输入账号和密码。因此比较繁琐。&lt;/p&gt;

&lt;p&gt;所以我们一般采用ssh方式来克隆远程仓库。&lt;/p&gt;

&lt;p&gt;不过采用ssh方式时，我们需要先配置下密钥。&lt;/p&gt;

&lt;h3 id=&#34;生成ssh秘钥&#34;&gt;生成ssh秘钥&lt;/h3&gt;

&lt;p&gt;生成ssh秘钥一般有两种方式，一种使用git生成，另一种则使用TortoiseGit自带的PuTTYgen生成。&lt;/p&gt;

&lt;h5 id=&#34;方式一-使用git生成&#34;&gt;方式一、 使用git生成&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;右键选择 &lt;code&gt;Git Bash Here&lt;/code&gt; 可打开git的控制台窗口&lt;/li&gt;

&lt;li&gt;&lt;p&gt;输入以下命令生成秘钥&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;example@email.com&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其中:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;example@email.com&lt;/code&gt; - 你你自己的github邮箱地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按回车后，会有一些输入项让你配置，默然直接回车即可。&lt;/p&gt;

&lt;p&gt;最后控制台的输出如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/UserName/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/UserName/.ssh/id_rsa.
Your public key has been saved in /c/Users/UserName/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxx example@email.com
The key&#39;s randomart image is:
+---[RSA 2048]----+
|xxxxxxxxxxxxxxxxxxx|
+----[SHA256]-----+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UserName&lt;/code&gt; - 你的计算机用户名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example@email.com&lt;/code&gt; - 你输入的github邮箱地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxxxxxxxxxxxxxxxxxx&lt;/code&gt; - 每个人都不同
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从而我们就得到了一对公钥和私钥。&lt;/p&gt;

&lt;p&gt;公钥存放在&lt;code&gt;c/Users/UserName/.ssh/id_rsa.pub&lt;/code&gt;中&lt;/p&gt;

&lt;p&gt;私钥存放在&lt;code&gt;c/Users/UserName/.ssh/id_rsa&lt;/code&gt;中&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;方式二-使用tortoisegit自带的puttygen生成&#34;&gt;方式二、使用TortoiseGit自带的PuTTYgen生成&lt;/h5&gt;

&lt;h3 id=&#34;github配置ssh&#34;&gt;github配置ssh&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开github配置界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/git/github_settings_menu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选择SSH and GPG keys&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/git/github_settings_ssh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选择New SSH key&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/git/github_settings_ssh_new.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;输入新的SSH Keys
&lt;img src=&#34;http://smilerfu.github.io/images/git/github_settings_ssh_new_add.png&#34; alt=&#34;&#34; /&gt;
其中:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Title&lt;/code&gt; - 用于区分不同秘钥，可自行定义&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Key&lt;/code&gt; - 即上面生成的公钥文件&lt;code&gt;id_rsa.pub&lt;/code&gt;里面的文本内容&lt;/p&gt;

&lt;p&gt;可通过以下命令获取:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd ~/.ssh
    cat id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把控制台输出的文本拷贝到输入框中。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;点击 Add SSH key 按钮就配置成功了&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;配置tortoisegit&#34;&gt;配置TortoiseGit&lt;/h3&gt;

&lt;p&gt;方式1使用git生成的秘钥是无法直接在TortoiseGit使用的。我们还要为TortoiseGit进行一些设置。
设置有2种方式。&lt;/p&gt;

&lt;h5 id=&#34;方式一-将tortoisegit的ssh-client设置为git的ssh-exe&#34;&gt;方式一、将TortoiseGit的SSH client设置为git的ssh.exe&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;打开TortoiseGit的设置界面，选择&lt;code&gt;Network&lt;/code&gt;选项&lt;/li&gt;
&lt;li&gt;将SSH client设置为git安装目录下&lt;code&gt;usr\bin\ssh.exe&lt;/code&gt;选项&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/git/git_settings_network.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;方式二-将上面git产生的私钥转换成tortoisegit使用的ppk秘钥&#34;&gt;方式二. 将上面git产生的私钥转换成TortoiseGit使用的ppk秘钥&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;运行&lt;code&gt;puttygen.exe&lt;/code&gt;(位于TortoiseGit安装目录下的bin目录)
&lt;img src=&#34;http://smilerfu.github.io/images/git/git_settings_puttygen_main.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;Load&lt;/code&gt;，加载方式一使用git生成的id_rsa私钥
&lt;img src=&#34;http://smilerfu.github.io/images/git/git_settings_puttygen_load.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;Save private key&lt;/code&gt;,保存为ppk格式文件。&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;pageant.exe&lt;/code&gt;位于TortoiseGit安装目录下的bin目录)&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;Add Key&lt;/code&gt;，选择刚才保存的 ppk 文件即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;修改仓库的访问方式-ssh或者https&#34;&gt;修改仓库的访问方式(ssh或者https)&lt;/h3&gt;

&lt;h5 id=&#34;查看当前的remote方式&#34;&gt;查看当前的remote方式&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;将ssh方式修改为https方式&#34;&gt;将ssh方式修改为https方式&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;git remote set-url origin https://github.com/yourname/example.git&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;将https方式修改为ssh方式&#34;&gt;将https方式修改为ssh方式&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;git remote set-url origin git@github.com:yourname/example.git&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;问题汇总&#34;&gt;问题汇总&lt;/h3&gt;

&lt;h5 id=&#34;1-tortoisegit-disconnected-no-supported-authentication报错&#34;&gt;1. TortoiseGit disconnected no supported authentication报错&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/git/git_error_disconnect_no_suported_authentication.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;该问题即没有配置好TortoiseGit，按照上面配置TortoiseGit进行配置即可&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Linux 设置静态IP</title>
      <link>http://smilerfu.github.io/post/linux_%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</link>
      <pubDate>Thu, 05 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/linux_%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</guid>
      
        <description>&lt;p&gt;
【注】: 以下环境在CentOS系统上&lt;/p&gt;

&lt;p&gt;网络配置的配置文件在&lt;code&gt;/etc/sysconfig/network-scripts/&lt;/code&gt;下，文件名前缀为&lt;code&gt;ifcfg-&lt;/code&gt;后面跟的就是网卡的名称，可以通过双TAB键查看然后编辑。&lt;/p&gt;

&lt;p&gt;例如网卡名为 eth0 的配置文件为: &lt;code&gt;ifcfg-eth0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ifcfg-lo&lt;/code&gt;是本地回环地址的配置文件，所有计算机都有，无需修改。&lt;/p&gt;

&lt;p&gt;默认情况下，是DHCP动态获取的。配置文件内容如下:
&lt;img src=&#34;http://smilerfu.github.io/images/linux/static_ip/linux_static_ip_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果需要改成静态的，修改的地方如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把 &lt;code&gt;BOOTPROTO=dhcp&lt;/code&gt; 改成 &lt;code&gt;BOOTPROTO=static&lt;/code&gt; 表示静态获取&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在最后追加下面的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BROADCAST=192.168.1.255
IPADDR=192.168.1.123
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置说明:\&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BROADCAST - 局域网广播地址&lt;/li&gt;
&lt;li&gt;IPADDR - 静态IP&lt;/li&gt;
&lt;li&gt;NETMASK - 子网掩码&lt;/li&gt;
&lt;li&gt;GATEWAY - 网关或者路由地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要说明，原来还有个NETWORK配置的是局域网网络号，这个是ifcalc自动计算的，所以这里配置这些就足够了&lt;/p&gt;

&lt;p&gt;配置如下图:
&lt;img src=&#34;http://smilerfu.github.io/images/linux/static_ip/linux_static_ip_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这时候重启下网络服务器&lt;/p&gt;

&lt;p&gt;使用命令行:&lt;code&gt;service network restart&lt;/code&gt;或者&lt;code&gt;/etc/init.d/network restart&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重启后，静态ip就生效了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;发现无法连接外网&lt;/p&gt;

&lt;p&gt;配置成功后，dns配置一般会消失，所以这时候就ping不通域名了，无法连接外网，需要配置DNS，配置文件位置是：&lt;code&gt;/etc/resolv.conf&lt;/code&gt;，里面的nameserver指定dns服务器地址。&lt;/p&gt;

&lt;p&gt;但是我们修改的文件仍然是&lt;code&gt;ifcfg-eth0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用命令&lt;code shell&gt; ipconfig /all &lt;/code&gt;查看主机(Windos)的DNS配置如下:
&lt;img src=&#34;http://smilerfu.github.io/images/linux/static_ip/linux_static_ip_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在配置文件末尾增加如下配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DNS1=114.114.114.114
DNS2=100.63.0.1
DNS3=202.96.128.166
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/linux/static_ip/linux_static_ip_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后和步骤3一样，重启下网络服务器&lt;/p&gt;

&lt;p&gt;此时再去重新看&lt;code&gt;resolv.conf&lt;/code&gt;文件内容，发现此文件已经更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://smilerfu.github.io/images/linux/static_ip/linux_static_ip_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>Python学习-Python扩展</title>
      <link>http://smilerfu.github.io/post/python_%E5%AD%A6%E4%B9%A0_c%E4%BA%A4%E4%BA%92/</link>
      <pubDate>Thu, 05 Apr 2018 01:39:00 +0800</pubDate>
      
      <guid>http://smilerfu.github.io/post/python_%E5%AD%A6%E4%B9%A0_c%E4%BA%A4%E4%BA%92/</guid>
      
        <description>&lt;p&gt;
【注】: 以下环境采用Python3.6.2版本&lt;/p&gt;

&lt;h3 id=&#34;初始化python虚拟机&#34;&gt;初始化Python虚拟机&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;stdafx.h&amp;quot;
#include &amp;lt;Python.h&amp;gt;
int main()
{
    // 初始化Python解释器
    Py_Initialize();
    if (!Py_IsInitialized())
    {
        PyErr_Print();
        system(&amp;quot;pause&amp;quot;);
        exit(-1);
    }

    // 将字符串作为代码执行，类似exec
    PyRun_SimpleString(&amp;quot;import sys&amp;quot;);
    PyRun_SimpleString(&amp;quot;print(dir(sys))&amp;quot;);

    // 报错堆栈打印
    PyErr_Print();

    // 结束Python解释器
    Py_Finalize();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;几个常用接口&#34;&gt;几个常用接口&lt;/h3&gt;

&lt;h5 id=&#34;1-int-pyrun-simplestring-const-char-command&#34;&gt;1.int PyRun_SimpleString(const char *command)&lt;/h5&gt;

&lt;p&gt;将字符串作为代码执行，类似&lt;code&gt;exec&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;返回值: 执行成功返回0，如果有异常返回-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyRun_SimpleString(&amp;quot;import sys&amp;quot;);
PyRun_SimpleString(&amp;quot;print(dir(sys))&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-pyobject-pyimport-importmodule-const-char-name&#34;&gt;2. PyObject* PyImport_ImportModule(const char *name)&lt;/h5&gt;

&lt;p&gt;导入一个模块，类似&lt;code&gt;import&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;返回值: PyObject(Return value: New reference)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject* mainModule = PyImport_ImportModule(&amp;quot;main&amp;quot;);
if (!mainModule)
{
    PyErr_Print();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-pyobject-pymodule-getdict-pyobject-module&#34;&gt;3. PyObject* PyModule_GetDict(PyObject *module)&lt;/h5&gt;

&lt;p&gt;获取模块属性字典&lt;/p&gt;

&lt;p&gt;PyObject(Return value: Borrowed reference)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject* mainDict = PyModule_GetDict(mainModule);
if (!mainDict)
{
    PyErr_Print();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-pyobject-pydict-getitemstring-pyobject-p-const-char-key&#34;&gt;4. PyObject* PyDict_GetItemString(PyObject *p, const char *key)&lt;/h5&gt;

&lt;p&gt;获取模块属性&lt;/p&gt;

&lt;p&gt;返回值: PyObject(Return value: Borrowed reference)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject* mainStartFunc = PyDict_GetItemString(mainDict, &amp;quot;Start&amp;quot;);
if (!mainStartFunc || !PyCallable_Check(mainStartFunc))
{
    PyErr_Print();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;5-pyobject-pyobject-callfunction-pyobject-callable-const-char-format&#34;&gt;5. PyObject* PyObject_CallFunction(PyObject *callable, const char *format, &amp;hellip;)&lt;/h5&gt;

&lt;p&gt;调用一个函数&lt;/p&gt;

&lt;p&gt;返回值: PyObject(Return value: New reference)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PyObject* returnValue = PyObject_CallFunction(mainStartFunc, NULL);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;6-void-py-decref-pyobject-o-和-void-py-xdecref-pyobject-o&#34;&gt;6. void Py_DECREF(PyObject *o) 和 void Py_XDECREF(PyObject *o)&lt;/h5&gt;

&lt;p&gt;减引用计数&lt;/p&gt;

&lt;p&gt;两个函数区别是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Py_DECREF传入参数o不能为NULL&lt;/li&gt;
&lt;li&gt;Py_XDECREF允许o为NULL&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Py_DECREF(returnValue);  // 或者: Py_XDECREF(returnValue); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;new-reference-和-borrowed-reference&#34;&gt;New reference 和 Borrowed reference&lt;/h3&gt;

&lt;p&gt;New reference 会增加引用计数，因此在释放时需要调用&lt;code&gt;Py_DECREF&lt;/code&gt;或者&lt;code&gt;Py_XDECREF&lt;/code&gt;进行减引用计数&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>